var cov_nsmybyrft=function(){var path="/home/lolo/bootcamp/collab/skylab-bootcamp-201907/staff/manuel-galvez/bro-holdem/bro-holdem-api/logic/user/update-user/index.spec.js";var hash="a75a4eb23e19d78ca37080feb10108aa1deceddf";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/home/lolo/bootcamp/collab/skylab-bootcamp-201907/staff/manuel-galvez/bro-holdem/bro-holdem-api/logic/user/update-user/index.spec.js",statementMap:{"0":{start:{line:1,column:0},end:{line:1,column:26}},"1":{start:{line:3,column:19},end:{line:3,column:34}},"2":{start:{line:4,column:14},end:{line:4,column:39}},"3":{start:{line:5,column:39},end:{line:5,column:65}},"4":{start:{line:6,column:15},end:{line:6,column:34}},"5":{start:{line:8,column:33},end:{line:8,column:40}},"6":{start:{line:11,column:0},end:{line:81,column:2}},"7":{start:{line:13,column:4},end:{line:13,column:47}},"8":{start:{line:13,column:17},end:{line:13,column:46}},"9":{start:{line:15,column:4},end:{line:17,column:6}},"10":{start:{line:16,column:8},end:{line:16,column:31}},"11":{start:{line:22,column:4},end:{line:33,column:6}},"12":{start:{line:24,column:8},end:{line:24,column:45}},"13":{start:{line:25,column:8},end:{line:25,column:51}},"14":{start:{line:26,column:8},end:{line:26,column:46}},"15":{start:{line:28,column:21},end:{line:28,column:52}},"16":{start:{line:29,column:8},end:{line:29,column:62}},"17":{start:{line:30,column:21},end:{line:30,column:50}},"18":{start:{line:32,column:8},end:{line:32,column:20}},"19":{start:{line:35,column:4},end:{line:47,column:6}},"20":{start:{line:37,column:21},end:{line:37,column:107}},"21":{start:{line:38,column:8},end:{line:38,column:33}},"22":{start:{line:40,column:27},end:{line:40,column:58}},"23":{start:{line:42,column:8},end:{line:42,column:35}},"24":{start:{line:43,column:8},end:{line:43,column:42}},"25":{start:{line:44,column:8},end:{line:44,column:56}},"26":{start:{line:45,column:8},end:{line:45,column:58}},"27":{start:{line:50,column:4},end:{line:59,column:6}},"28":{start:{line:51,column:8},end:{line:51,column:39}},"29":{start:{line:52,column:8},end:{line:57,column:9}},"30":{start:{line:53,column:12},end:{line:53,column:98}},"31":{start:{line:56,column:12},end:{line:56,column:74}},"32":{start:{line:62,column:4},end:{line:66,column:5}},"33":{start:{line:63,column:8},end:{line:65,column:42}},"34":{start:{line:64,column:12},end:{line:64,column:107}},"35":{start:{line:67,column:4},end:{line:71,column:5}},"36":{start:{line:68,column:8},end:{line:70,column:61}},"37":{start:{line:69,column:12},end:{line:69,column:114}},"38":{start:{line:72,column:4},end:{line:77,column:5}},"39":{start:{line:73,column:8},end:{line:75,column:57}},"40":{start:{line:74,column:12},end:{line:74,column:110}},"41":{start:{line:80,column:4},end:{line:80,column:38}},"42":{start:{line:80,column:16},end:{line:80,column:37}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:11,column:31},end:{line:11,column:32}},loc:{start:{line:11,column:37},end:{line:81,column:1}},line:11},"1":{name:"(anonymous_1)",decl:{start:{line:13,column:11},end:{line:13,column:12}},loc:{start:{line:13,column:17},end:{line:13,column:46}},line:13},"2":{name:"(anonymous_2)",decl:{start:{line:15,column:15},end:{line:15,column:16}},loc:{start:{line:15,column:27},end:{line:17,column:5}},line:15},"3":{name:"(anonymous_3)",decl:{start:{line:22,column:15},end:{line:22,column:16}},loc:{start:{line:22,column:27},end:{line:33,column:5}},line:22},"4":{name:"(anonymous_4)",decl:{start:{line:35,column:41},end:{line:35,column:42}},loc:{start:{line:35,column:53},end:{line:47,column:5}},line:35},"5":{name:"(anonymous_5)",decl:{start:{line:50,column:41},end:{line:50,column:42}},loc:{start:{line:50,column:53},end:{line:59,column:5}},line:50},"6":{name:"(anonymous_6)",decl:{start:{line:62,column:34},end:{line:62,column:35}},loc:{start:{line:63,column:8},end:{line:65,column:42}},line:63},"7":{name:"(anonymous_7)",decl:{start:{line:63,column:15},end:{line:63,column:16}},loc:{start:{line:64,column:12},end:{line:64,column:107}},line:64},"8":{name:"(anonymous_8)",decl:{start:{line:67,column:38},end:{line:67,column:39}},loc:{start:{line:68,column:8},end:{line:70,column:61}},line:68},"9":{name:"(anonymous_9)",decl:{start:{line:68,column:15},end:{line:68,column:16}},loc:{start:{line:69,column:12},end:{line:69,column:114}},line:69},"10":{name:"(anonymous_10)",decl:{start:{line:72,column:39},end:{line:72,column:40}},loc:{start:{line:73,column:8},end:{line:75,column:57}},line:73},"11":{name:"(anonymous_11)",decl:{start:{line:73,column:15},end:{line:73,column:16}},loc:{start:{line:74,column:12},end:{line:74,column:110}},line:74},"12":{name:"(anonymous_12)",decl:{start:{line:80,column:10},end:{line:80,column:11}},loc:{start:{line:80,column:16},end:{line:80,column:37}},line:80}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"a75a4eb23e19d78ca37080feb10108aa1deceddf"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_nsmybyrft.s[0]++;require('dotenv').config();const{expect}=(cov_nsmybyrft.s[1]++,require('chai'));const logic=(cov_nsmybyrft.s[2]++,require('../../../logic'));const{database,models:{User}}=(cov_nsmybyrft.s[3]++,require('bro-holdem-data'));const bcrypt=(cov_nsmybyrft.s[4]++,require('bcryptjs'));const{env:{DB_URL_TEST}}=(cov_nsmybyrft.s[5]++,process);cov_nsmybyrft.s[6]++;describe('logic- update user',()=>{cov_nsmybyrft.f[0]++;cov_nsmybyrft.s[7]++;before(()=>{cov_nsmybyrft.f[1]++;cov_nsmybyrft.s[8]++;return database.connect(DB_URL_TEST);});cov_nsmybyrft.s[9]++;beforeEach(async()=>{cov_nsmybyrft.f[2]++;cov_nsmybyrft.s[10]++;await User.deleteMany();});let id,username,email,password;cov_nsmybyrft.s[11]++;beforeEach(async()=>{cov_nsmybyrft.f[3]++;cov_nsmybyrft.s[12]++;username=`surname-${Math.random()}`;cov_nsmybyrft.s[13]++;email=`email-${Math.random()}@domain.com`;cov_nsmybyrft.s[14]++;password=`password-${Math.random()}`;const hash=(cov_nsmybyrft.s[15]++,await bcrypt.hash(password,10));cov_nsmybyrft.s[16]++;await User.create({username,email,password:hash});const user=(cov_nsmybyrft.s[17]++,await User.findOne({email}));cov_nsmybyrft.s[18]++;id=user.id;});cov_nsmybyrft.s[19]++;it('should succeed on correct data',async()=>{cov_nsmybyrft.f[4]++;const user=(cov_nsmybyrft.s[20]++,await logic.updateUser(id,{username:'username',email:'new@email.com',password}));cov_nsmybyrft.s[21]++;expect(user).not.to.exist;const userUpdate=(cov_nsmybyrft.s[22]++,await User.findOne({_id:id}));cov_nsmybyrft.s[23]++;expect(userUpdate).to.exist;cov_nsmybyrft.s[24]++;expect(userUpdate.id).to.equal(id);cov_nsmybyrft.s[25]++;expect(userUpdate.username).to.equal('username');cov_nsmybyrft.s[26]++;expect(userUpdate.email).to.equal('new@email.com');});cov_nsmybyrft.s[27]++;it('should fail on unexisting user',async()=>{cov_nsmybyrft.f[5]++;cov_nsmybyrft.s[28]++;id="5d772fb62bb54120d08d7a7b";cov_nsmybyrft.s[29]++;try{cov_nsmybyrft.s[30]++;await logic.updateUser(id,{username:'username',email:'new@email.com',password});}catch({message}){cov_nsmybyrft.s[31]++;expect(message).to.equal(`User with id ${id} does not exist.`);}});cov_nsmybyrft.s[32]++;it('should fail on empty id',()=>{cov_nsmybyrft.f[6]++;cov_nsmybyrft.s[33]++;return expect(()=>{cov_nsmybyrft.f[7]++;cov_nsmybyrft.s[34]++;return logic.updateUser('',{username:'username',email:'new@email.com',password:'newPassword'});}).to.throw('id is empty or blank');});cov_nsmybyrft.s[35]++;it('should fail on undefined id',()=>{cov_nsmybyrft.f[8]++;cov_nsmybyrft.s[36]++;return expect(()=>{cov_nsmybyrft.f[9]++;cov_nsmybyrft.s[37]++;return logic.updateUser(undefined,{username:'username',email:'new@email.com',password:'newPassword'});}).to.throw('id with value undefined is not a string');});cov_nsmybyrft.s[38]++;it('should fail on non-string id',()=>{cov_nsmybyrft.f[10]++;cov_nsmybyrft.s[39]++;return expect(()=>{cov_nsmybyrft.f[11]++;cov_nsmybyrft.s[40]++;return logic.updateUser(12345,{username:'username',email:'new@email.com',password:'newPassword'});}).to.throw('id with value 12345 is not a string');});cov_nsmybyrft.s[41]++;after(()=>{cov_nsmybyrft.f[12]++;cov_nsmybyrft.s[42]++;return database.disconnect();});});